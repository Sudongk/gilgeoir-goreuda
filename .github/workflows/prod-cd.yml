name: Deploy To Main Server

on:
  push:
    branches:
      - main

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build for asciiDoc
        run: ./gradlew bootjar

      - name: Build with Gradle
        run: ./gradlew bootjar

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: sudongk/gilgeorigoreuda-prod:latest

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: sudongk/gilgeorigoreuda-prod:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy1:
    runs-on: ubuntu-latest
    if: ${{ needs.docker-build.result == 'success' }}
    needs: [ docker-build ]
    steps:
      - name: Deploy to ${{ secrets.PROD_SERVER_HOST_1 }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST_1 }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          debug: true

          script: |
            sudo docker pull sudongk/gilgeorigoreuda-prod:latest
            echo "디버깅 target host ${{ secrets.PROD_SERVER_HOST_1 }}"
            if sudo docker ps | grep ":8080"; then
              export BEFORE_PORT=8080
              export NEW_PORT=8081
              export NEW_ACTUATOR_PORT=8089
            else
              export BEFORE_PORT=8081
              export NEW_PORT=8080
              export NEW_ACTUATOR_PORT=8088
            fi
            
            echo "디버깅 before port $BEFORE_PORT"
            echo "디버깅 new port $NEW_PORT"
            echo "디버깅 new actuator $NEW_ACTUATOR_PORT"
            
            sudo docker run -d -p $NEW_PORT:$NEW_PORT -p $NEW_ACTUATOR_PORT:8088 \
            -e "SPRING_PROFILE=prod" \
            --network=mynetwork \
            --name gilgeorigoreuda-prod$NEW_PORT \
            sudongk/gilgeorigoreuda-prod:latest
            
            sudo docker image prune -a -f
            
            sudo sh /home/ubuntu/bluegreen.sh \
            $BEFORE_PORT \
            $NEW_PORT \
            $NEW_ACTUATOR_PORT

  deploy2:
    runs-on: ubuntu-latest
    if: ${{ needs.docker-build.result == 'success' }}
    needs: [ docker-build ]
    steps:
      - name: Deploy to ${{ secrets.PROD_SERVER_HOST_2 }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST_2 }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          debug: true

          script: |
            sudo docker pull sudongk/gilgeorigoreuda-prod:latest
            echo "디버깅 target host ${{ secrets.PROD_SERVER_HOST_2 }}"
            if sudo docker ps | grep ":8080"; then
              export BEFORE_PORT=8080
              export NEW_PORT=8081
              export NEW_ACTUATOR_PORT=8089
            else
              export BEFORE_PORT=8081
              export NEW_PORT=8080
              export NEW_ACTUATOR_PORT=8088
            fi
            
            echo "디버깅 before port $BEFORE_PORT"
            echo "디버깅 new port $NEW_PORT"
            echo "디버깅 new actuator $NEW_ACTUATOR_PORT"
            
            sudo docker run -d -p $NEW_PORT:$NEW_PORT -p $NEW_ACTUATOR_PORT:8088 \
            -e "SPRING_PROFILE=prod" \
            --network=mynetwork \
            --name gilgeorigoreuda-prod$NEW_PORT \
            sudongk/gilgeorigoreuda-prod:latest
            
            sudo docker image prune -a -f
            
            sudo sh /home/ubuntu/bluegreen.sh \
            $BEFORE_PORT \
            $NEW_PORT \
            $NEW_ACTUATOR_PORT

  deploy3:
    runs-on: ubuntu-latest
    if: ${{ needs.docker-build.result == 'success' }}
    needs: [ docker-build ]
    steps:
      - name: Deploy to ${{ secrets.PROD_SERVER_HOST_3 }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_SERVER_HOST_3 }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_KEY }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          debug: true

          script: |
            sudo docker pull sudongk/gilgeorigoreuda-prod:latest
            echo "디버깅 target host ${{ secrets.PROD_SERVER_HOST_3 }}"
            if sudo docker ps | grep ":8080"; then
              export BEFORE_PORT=8080
              export NEW_PORT=8081
              export NEW_ACTUATOR_PORT=8089
            else
              export BEFORE_PORT=8081
              export NEW_PORT=8080
              export NEW_ACTUATOR_PORT=8088
            fi
            
            echo "디버깅 before port $BEFORE_PORT"
            echo "디버깅 new port $NEW_PORT"
            echo "디버깅 new actuator $NEW_ACTUATOR_PORT"
            
            sudo docker run -d -p $NEW_PORT:$NEW_PORT -p $NEW_ACTUATOR_PORT:8088 \
            -e "SPRING_PROFILE=prod" \
            --network=mynetwork \
            --name gilgeorigoreuda-prod$NEW_PORT \
            sudongk/gilgeorigoreuda-prod:latest
            
            sudo docker image prune -a -f
          
            sudo sh /home/ubuntu/bluegreen.sh \
            $BEFORE_PORT \
            $NEW_PORT \
            $NEW_ACTUATOR_PORT
